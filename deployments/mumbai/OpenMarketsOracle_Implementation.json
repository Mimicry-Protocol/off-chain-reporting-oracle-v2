{
  "address": "0x83d148109892BAeE3E67c0886EE606627A92F1ec",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DataFeedCreatorExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DataFeedCreatorNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DataFeedNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDataFeedCreator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoValueFoundForTimestamp",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoValuesInDataFeed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDataFeedOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyScribes",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlySubscriberOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ScribeExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ScribeNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SubscriberNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SubscriberOwnerNotFound",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dataFeedId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "nickname",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "DataFeedCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "dataFeedCreator",
          "type": "address"
        }
      ],
      "name": "DataFeedCreatorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "dataFeedCreator",
          "type": "address"
        }
      ],
      "name": "DataFeedCreatorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dataFeedId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "nickname",
          "type": "string"
        }
      ],
      "name": "NicknameUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dataFeedId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "scribe",
          "type": "address"
        }
      ],
      "name": "ScribeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dataFeedId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "scribe",
          "type": "address"
        }
      ],
      "name": "ScribeRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dataFeedId",
          "type": "uint256"
        }
      ],
      "name": "SubscriberAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dataFeedId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "ValueUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newCreator",
          "type": "address"
        }
      ],
      "name": "addDataFeedCreator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dataFeedId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newScrbe",
          "type": "address"
        }
      ],
      "name": "addScribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_nickname",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "_allowedScribes",
          "type": "address[]"
        }
      ],
      "name": "createDataFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "dataFeedCreators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dataFeeds",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "nickname",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dataFeedId",
          "type": "uint256"
        }
      ],
      "name": "getDataFeedInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "nickname",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct OpenMarketsOracle.Value",
              "name": "latestValue",
              "type": "tuple"
            }
          ],
          "internalType": "struct OpenMarketsOracle.DataFeedInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dataFeedId",
          "type": "uint256"
        }
      ],
      "name": "getDataFeedNickname",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDataFeeds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "nickname",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct OpenMarketsOracle.Value",
              "name": "latestValue",
              "type": "tuple"
            }
          ],
          "internalType": "struct OpenMarketsOracle.DataFeedInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getDataFeeds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "nickname",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct OpenMarketsOracle.Value",
              "name": "latestValue",
              "type": "tuple"
            }
          ],
          "internalType": "struct OpenMarketsOracle.DataFeedInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        }
      ],
      "name": "getDataFeeds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "nickname",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct OpenMarketsOracle.Value",
              "name": "latestValue",
              "type": "tuple"
            }
          ],
          "internalType": "struct OpenMarketsOracle.DataFeedInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIndexValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dataFeedId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getIndexValueBefore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dataFeedId",
          "type": "uint256"
        }
      ],
      "name": "getLatestValue",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct OpenMarketsOracle.Value",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dataFeedId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        }
      ],
      "name": "getValues",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct OpenMarketsOracle.Value[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dataFeedId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        },
        {
          "internalType": "enum OpenMarketsOracle.SortDirection",
          "name": "_sortDirection",
          "type": "uint8"
        }
      ],
      "name": "getValues",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct OpenMarketsOracle.Value[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dataFeedId",
          "type": "uint256"
        }
      ],
      "name": "getValues",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct OpenMarketsOracle.Value[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dataFeedId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getValues",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct OpenMarketsOracle.Value[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dataFeedId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_maybeScribe",
          "type": "address"
        }
      ],
      "name": "isDataFeedScribe",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextDataFeedId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_subscriber",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_dataFeedId",
          "type": "uint256"
        }
      ],
      "name": "registerDataFeedSubscriber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creatorToRemove",
          "type": "address"
        }
      ],
      "name": "removeDataFeedCreator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dataFeedId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_scribeToRemove",
          "type": "address"
        }
      ],
      "name": "removeScribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "subscriberRegistry",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dataFeedId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_newNickname",
          "type": "string"
        }
      ],
      "name": "updateDataFeedNickname",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dataFeedId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "updateValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4ef768e0ad128fb73f9111251747f1a29f7d9da05ecd83779aa076dafc269ff5",
  "receipt": {
    "to": null,
    "from": "0x764A448e7fDc1E206059942e3eBB3EdBe4FA644e",
    "contractAddress": "0x83d148109892BAeE3E67c0886EE606627A92F1ec",
    "transactionIndex": 5,
    "gasUsed": "2349766",
    "logsBloom": "0x
    "blockHash": "0x58b47f0d3f4b09daaaf71eb9642c12ca899c941cc8ede33a05c4af7368e52f6c",
    "transactionHash": "0x4ef768e0ad128fb73f9111251747f1a29f7d9da05ecd83779aa076dafc269ff5",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 35550266,
        "transactionHash": "0x4ef768e0ad128fb73f9111251747f1a29f7d9da05ecd83779aa076dafc269ff5",
        "address": "0x83d148109892BAeE3E67c0886EE606627A92F1ec",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 10,
        "blockHash": "0x58b47f0d3f4b09daaaf71eb9642c12ca899c941cc8ede33a05c4af7368e52f6c"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 35550266,
        "transactionHash": "0x4ef768e0ad128fb73f9111251747f1a29f7d9da05ecd83779aa076dafc269ff5",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000764a448e7fdc1e206059942e3ebb3edbe4fa644e",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000c85a64b9a5a00000000000000000000000000000000000000000000000000e6833f6e2cbd99700000000000000000000000000000000000000000000008ce716f81e5aa9f59cf000000000000000000000000000000000000000000000000e676b9c7e1233f700000000000000000000000000000000000000000000008ce717c078bf639b3cf",
        "logIndex": 11,
        "blockHash": "0x58b47f0d3f4b09daaaf71eb9642c12ca899c941cc8ede33a05c4af7368e52f6c"
      }
    ],
    "blockNumber": 35550266,
    "cumulativeGasUsed": "3278664",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "ad28c2fa269d18bf4e899a760ab67a42",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DataFeedCreatorExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DataFeedCreatorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DataFeedNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDataFeedCreator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoValueFoundForTimestamp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoValuesInDataFeed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDataFeedOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyScribes\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlySubscriberOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ScribeExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ScribeNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubscriberNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubscriberOwnerNotFound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dataFeedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"nickname\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"DataFeedCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dataFeedCreator\",\"type\":\"address\"}],\"name\":\"DataFeedCreatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dataFeedCreator\",\"type\":\"address\"}],\"name\":\"DataFeedCreatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dataFeedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"nickname\",\"type\":\"string\"}],\"name\":\"NicknameUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dataFeedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"scribe\",\"type\":\"address\"}],\"name\":\"ScribeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dataFeedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"scribe\",\"type\":\"address\"}],\"name\":\"ScribeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dataFeedId\",\"type\":\"uint256\"}],\"name\":\"SubscriberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dataFeedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ValueUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCreator\",\"type\":\"address\"}],\"name\":\"addDataFeedCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dataFeedId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newScrbe\",\"type\":\"address\"}],\"name\":\"addScribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_nickname\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_allowedScribes\",\"type\":\"address[]\"}],\"name\":\"createDataFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dataFeedCreators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dataFeeds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"nickname\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dataFeedId\",\"type\":\"uint256\"}],\"name\":\"getDataFeedInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nickname\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct OpenMarketsOracle.Value\",\"name\":\"latestValue\",\"type\":\"tuple\"}],\"internalType\":\"struct OpenMarketsOracle.DataFeedInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dataFeedId\",\"type\":\"uint256\"}],\"name\":\"getDataFeedNickname\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDataFeeds\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nickname\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct OpenMarketsOracle.Value\",\"name\":\"latestValue\",\"type\":\"tuple\"}],\"internalType\":\"struct OpenMarketsOracle.DataFeedInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getDataFeeds\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nickname\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct OpenMarketsOracle.Value\",\"name\":\"latestValue\",\"type\":\"tuple\"}],\"internalType\":\"struct OpenMarketsOracle.DataFeedInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"getDataFeeds\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nickname\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct OpenMarketsOracle.Value\",\"name\":\"latestValue\",\"type\":\"tuple\"}],\"internalType\":\"struct OpenMarketsOracle.DataFeedInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIndexValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dataFeedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getIndexValueBefore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dataFeedId\",\"type\":\"uint256\"}],\"name\":\"getLatestValue\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct OpenMarketsOracle.Value\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dataFeedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"getValues\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct OpenMarketsOracle.Value[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dataFeedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"enum OpenMarketsOracle.SortDirection\",\"name\":\"_sortDirection\",\"type\":\"uint8\"}],\"name\":\"getValues\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct OpenMarketsOracle.Value[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dataFeedId\",\"type\":\"uint256\"}],\"name\":\"getValues\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct OpenMarketsOracle.Value[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dataFeedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getValues\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct OpenMarketsOracle.Value[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dataFeedId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_maybeScribe\",\"type\":\"address\"}],\"name\":\"isDataFeedScribe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextDataFeedId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subscriber\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dataFeedId\",\"type\":\"uint256\"}],\"name\":\"registerDataFeedSubscriber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creatorToRemove\",\"type\":\"address\"}],\"name\":\"removeDataFeedCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dataFeedId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_scribeToRemove\",\"type\":\"address\"}],\"name\":\"removeScribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"subscriberRegistry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dataFeedId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newNickname\",\"type\":\"string\"}],\"name\":\"updateDataFeedNickname\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dataFeedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OpenMarketsOracle.sol\":\"OpenMarketsOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"contracts/OpenMarketsOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {IOwnable} from \\\"./interfaces/IOwnable.sol\\\";\\n\\ncontract OpenMarketsOracle is Initializable, OwnableUpgradeable, UUPSUpgradeable {\\n    /* TYPES */\\n\\n    enum SortDirection {\\n        DESCENDING,\\n        ASCENDING\\n    }\\n\\n    struct Value {\\n        uint256 value;\\n        uint256 timestamp;\\n    }\\n\\n    struct DataFeed {\\n        address owner;\\n        string nickname;\\n        Value[] values;\\n        mapping(address => bool) scribes;\\n    }\\n\\n    struct DataFeedInfo {\\n        uint256 id;\\n        string nickname;\\n        Value latestValue;\\n    }\\n\\n    /* STATE */\\n\\n    uint256 public nextDataFeedId;\\n\\n    mapping(uint256 => DataFeed) public dataFeeds;\\n\\n    mapping(address => bool) public dataFeedCreators;\\n\\n    mapping(address => uint256) public subscriberRegistry;\\n\\n    /* EVENTS */\\n\\n    event DataFeedCreated(uint256 dataFeedId, string nickname, address owner);\\n\\n    event ScribeAdded(uint256 dataFeedId, address scribe);\\n\\n    event ScribeRemoved(uint256 dataFeedId, address scribe);\\n\\n    event SubscriberAdded(address subscriber, uint256 dataFeedId);\\n\\n    event NicknameUpdated(uint256 dataFeedId, string nickname);\\n\\n    event ValueUpdated(uint256 dataFeedId, uint256 newValue);\\n\\n    event DataFeedCreatorAdded(address dataFeedCreator);\\n\\n    event DataFeedCreatorRemoved(address dataFeedCreator);\\n\\n    /* ERRORS */\\n\\n    error InvalidDataFeedCreator();\\n\\n    error OnlyDataFeedOwner();\\n\\n    error OnlyScribes();\\n\\n    error NoZeroAddress();\\n\\n    error DataFeedCreatorExists();\\n\\n    error DataFeedCreatorNotFound();\\n\\n    error ScribeExists();\\n\\n    error ScribeNotFound();\\n\\n    error SubscriberNotFound();\\n\\n    error NoValuesInDataFeed();\\n\\n    error SubscriberOwnerNotFound();\\n\\n    error OnlySubscriberOwner();\\n\\n    error NoValueFoundForTimestamp();\\n\\n    error DataFeedNotFound();\\n\\n    /* MODIFIERS */\\n\\n    modifier onlyDataFeedOwner(uint256 _dataFeedId) {\\n        if (msg.sender != dataFeeds[_dataFeedId].owner) {\\n            revert OnlyDataFeedOwner();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyScribes(uint256 _dataFeedId) {\\n        if (\\n            msg.sender != dataFeeds[_dataFeedId].owner &&\\n            !dataFeeds[_dataFeedId].scribes[msg.sender]\\n        ) {\\n            revert OnlyScribes();\\n        }\\n        _;\\n    }\\n\\n    /* FUNCTIONS */\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize() public initializer {\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n        nextDataFeedId = 1;\\n    }\\n\\n    function createDataFeed(\\n        string memory _nickname,\\n        address[] memory _allowedScribes\\n    ) external {\\n        if (msg.sender != owner() && !dataFeedCreators[msg.sender]) {\\n            revert InvalidDataFeedCreator();\\n        }\\n\\n        uint256 dataFeedId = nextDataFeedId++;\\n        dataFeeds[dataFeedId].owner = msg.sender;\\n        dataFeeds[dataFeedId].nickname = _nickname;\\n\\n        for (uint256 i = 0; i < _allowedScribes.length; i++) {\\n            dataFeeds[dataFeedId].scribes[_allowedScribes[i]] = true;\\n        }\\n\\n        emit DataFeedCreated(dataFeedId, _nickname, msg.sender);\\n    }\\n\\n    function addDataFeedCreator(address _newCreator) external onlyOwner {\\n        if (_newCreator == address(0)) {\\n            revert NoZeroAddress();\\n        }\\n\\n        if (dataFeedCreators[_newCreator]) {\\n            revert DataFeedCreatorExists();\\n        }\\n\\n        dataFeedCreators[_newCreator] = true;\\n\\n        emit DataFeedCreatorAdded(_newCreator);\\n    }\\n\\n    function removeDataFeedCreator(\\n        address _creatorToRemove\\n    ) external onlyOwner {\\n        if (_creatorToRemove == address(0)) {\\n            revert NoZeroAddress();\\n        }\\n\\n        if (!dataFeedCreators[_creatorToRemove]) {\\n            revert DataFeedCreatorNotFound();\\n        }\\n\\n        delete dataFeedCreators[_creatorToRemove];\\n\\n        emit DataFeedCreatorRemoved(_creatorToRemove);\\n    }\\n\\n    function addScribe(\\n        uint256 _dataFeedId,\\n        address _newScrbe\\n    ) external onlyDataFeedOwner(_dataFeedId) {\\n        if (_newScrbe == address(0)) {\\n            revert NoZeroAddress();\\n        }\\n\\n        if (dataFeeds[_dataFeedId].scribes[_newScrbe]) {\\n            revert ScribeExists();\\n        }\\n\\n        dataFeeds[_dataFeedId].scribes[_newScrbe] = true;\\n        emit ScribeAdded(_dataFeedId, _newScrbe);\\n    }\\n\\n    function removeScribe(\\n        uint256 _dataFeedId,\\n        address _scribeToRemove\\n    ) external onlyDataFeedOwner(_dataFeedId) {\\n        if (!dataFeeds[_dataFeedId].scribes[_scribeToRemove]) {\\n            revert ScribeNotFound();\\n        }\\n\\n        delete dataFeeds[_dataFeedId].scribes[_scribeToRemove];\\n        emit ScribeRemoved(_dataFeedId, _scribeToRemove);\\n    }\\n\\n    function registerDataFeedSubscriber(\\n        address _subscriber,\\n        uint256 _dataFeedId\\n    ) external {\\n        if (_subscriber == address(0)) {\\n            revert NoZeroAddress();\\n        }\\n\\n        address _subscriberOwner = IOwnable(_subscriber).owner();\\n\\n        if (_subscriberOwner == address(0)) {\\n            revert SubscriberOwnerNotFound();\\n        }\\n\\n        if (_subscriberOwner != msg.sender) {\\n            revert OnlySubscriberOwner();\\n        }\\n\\n        subscriberRegistry[_subscriber] = _dataFeedId;\\n\\n        emit SubscriberAdded(_subscriber, _dataFeedId);\\n    }\\n\\n    function updateDataFeedNickname(\\n        uint256 _dataFeedId,\\n        string memory _newNickname\\n    ) external onlyDataFeedOwner(_dataFeedId) {\\n        dataFeeds[_dataFeedId].nickname = _newNickname;\\n\\n        emit NicknameUpdated(_dataFeedId, _newNickname);\\n    }\\n\\n    function updateValue(\\n        uint256 _dataFeedId,\\n        uint256 _value\\n    ) external onlyScribes(_dataFeedId) {\\n        // solhint-disable-next-line not-rely-on-time\\n        dataFeeds[_dataFeedId].values.push(Value(_value, block.timestamp));\\n\\n        emit ValueUpdated(_dataFeedId, _value);\\n    }\\n\\n    function getIndexValue() external view returns (uint256) {\\n        uint256 dataFeedId = subscriberRegistry[msg.sender];\\n\\n        if (dataFeedId == 0) {\\n            revert SubscriberNotFound();\\n        }\\n\\n        return getIndexValueBefore(dataFeedId, 0);\\n    }\\n\\n    function getIndexValueBefore(\\n        uint256 _dataFeedId,\\n        uint256 _timestamp\\n    ) public view returns (uint256) {\\n        if (dataFeeds[_dataFeedId].values.length == 0) {\\n            revert NoValuesInDataFeed();\\n        }\\n\\n        if (_timestamp == 0) {\\n            return\\n                dataFeeds[_dataFeedId]\\n                    .values[dataFeeds[_dataFeedId].values.length - 1]\\n                    .value;\\n        }\\n\\n        for (uint256 i = dataFeeds[_dataFeedId].values.length; i > 0; i--) {\\n            Value memory currentValue = dataFeeds[_dataFeedId].values[i - 1];\\n\\n            if (currentValue.timestamp <= _timestamp) {\\n                return currentValue.value;\\n            }\\n        }\\n\\n        revert NoValueFoundForTimestamp();\\n    }\\n\\n    function getValues(\\n        uint256 _dataFeedId\\n    ) external view returns (Value[] memory) {\\n        return getValues(_dataFeedId, 1000, 0, SortDirection.DESCENDING);\\n    }\\n\\n    function getValues(\\n        uint256 _dataFeedId,\\n        uint256 _limit\\n    ) external view returns (Value[] memory) {\\n        return getValues(_dataFeedId, _limit, 0, SortDirection.DESCENDING);\\n    }\\n\\n    function getValues(\\n        uint256 _dataFeedId,\\n        uint256 _limit,\\n        uint256 _offset\\n    ) external view returns (Value[] memory) {\\n        return\\n            getValues(_dataFeedId, _limit, _offset, SortDirection.DESCENDING);\\n    }\\n\\n    function getValues(\\n        uint256 _dataFeedId,\\n        uint256 _limit,\\n        uint256 _offset,\\n        SortDirection _sortDirection\\n    ) public view returns (Value[] memory) {\\n        if (dataFeeds[_dataFeedId].owner == address(0)) {\\n            revert DataFeedNotFound();\\n        }\\n\\n        uint256 totalValues = dataFeeds[_dataFeedId].values.length;\\n\\n        if (totalValues == 0 || _offset > totalValues) {\\n            return new Value[](0);\\n        }\\n\\n        uint256 resultCount = totalValues - _offset;\\n\\n        if (resultCount > _limit) {\\n            resultCount = _limit;\\n        }\\n\\n        Value[] memory valuesList = new Value[](resultCount);\\n\\n        if (_sortDirection == SortDirection.DESCENDING) {\\n            for (uint256 i = 0; i < resultCount; i++) {\\n                valuesList[i] = dataFeeds[_dataFeedId].values[\\n                    totalValues - 1 - _offset - i\\n                ];\\n            }\\n        } else {\\n            for (uint256 i = 0; i < resultCount; i++) {\\n                valuesList[i] = dataFeeds[_dataFeedId].values[_offset + i];\\n            }\\n        }\\n\\n        return valuesList;\\n    }\\n\\n    function getDataFeeds() external view returns (DataFeedInfo[] memory) {\\n        return getDataFeeds(1000, 0);\\n    }\\n\\n    function getDataFeeds(\\n        uint256 _limit\\n    ) external view returns (DataFeedInfo[] memory) {\\n        return getDataFeeds(_limit, 0);\\n    }\\n\\n    function getDataFeeds(\\n        uint256 _limit,\\n        uint256 _offset\\n    ) public view returns (DataFeedInfo[] memory) {\\n        uint256 dataFeedCount = nextDataFeedId - 1;\\n\\n        if (_offset > dataFeedCount) {\\n            return new DataFeedInfo[](0);\\n        }\\n\\n        uint256 resultCount = dataFeedCount - _offset;\\n\\n        if (resultCount > _limit) {\\n            resultCount = _limit;\\n        }\\n\\n        DataFeedInfo[] memory dataFeedList = new DataFeedInfo[](resultCount);\\n\\n        for (uint256 i = 0; i < resultCount; i++) {\\n            uint256 dataFeedIndex = _offset + i + 1;\\n\\n            dataFeedList[i] = DataFeedInfo(\\n                dataFeedIndex,\\n                dataFeeds[dataFeedIndex].nickname,\\n                getLatestValue(dataFeedIndex)\\n            );\\n        }\\n\\n        return dataFeedList;\\n    }\\n\\n    function getDataFeedInfo(\\n        uint256 _dataFeedId\\n    ) external view returns (DataFeedInfo memory) {\\n        if (dataFeeds[_dataFeedId].owner == address(0)) {\\n            revert DataFeedNotFound();\\n        }\\n\\n        return\\n            DataFeedInfo(\\n                _dataFeedId,\\n                dataFeeds[_dataFeedId].nickname,\\n                getLatestValue(_dataFeedId)\\n            );\\n    }\\n\\n    function isDataFeedScribe(\\n        uint256 _dataFeedId,\\n        address _maybeScribe\\n    ) external view returns (bool) {\\n        if (dataFeeds[_dataFeedId].owner == address(0)) {\\n            revert DataFeedNotFound();\\n        }\\n\\n        return dataFeeds[_dataFeedId].scribes[_maybeScribe];\\n    }\\n\\n    function getDataFeedNickname(\\n        uint256 _dataFeedId\\n    ) external view returns (string memory) {\\n        return dataFeeds[_dataFeedId].nickname;\\n    }\\n\\n    function getLatestValue(\\n        uint256 _dataFeedId\\n    ) public view returns (Value memory) {\\n        if (dataFeeds[_dataFeedId].values.length == 0) {\\n            return Value(0, 0);\\n        }\\n\\n        return\\n            dataFeeds[_dataFeedId].values[\\n                dataFeeds[_dataFeedId].values.length - 1\\n            ];\\n    }\\n\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    )\\n        internal\\n        override\\n        onlyOwner // solhint-disable-next-line no-empty-blocks\\n    {}\\n}\\n\",\"keccak256\":\"0x680ec5a214c282c0af22ea22b96ffbd96c10d13f577d9a209ab89baab5e79032\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IOwnable {\\n    function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xb662da8a55a7d3ece9ad37b0dc91631a598f8b8bd7ea77652a4e056f6bd61e98\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b60805161291562000120600039600081816109240152818161096d01528181610d8301528181610dc30152610e5601526129156000f3fe6080604052600436106101e35760003560e01c8063715018a6116101025780639e12a6da11610095578063cbc6fb8711610064578063cbc6fb87146105a7578063e2bacbf1146105d7578063e9865c73146105f7578063f2fde38b1461061757600080fd5b80639e12a6da14610531578063a0ab362314610551578063a1a83c9f14610567578063b29e522c1461058757600080fd5b80638944df32116100d15780638944df321461049c578063897d349f146104c95780638da5cb5b146104e9578063932645751461051157600080fd5b8063715018a6146104255780637b06ec681461043a5780637eeef551146104675780638129fc1c1461048757600080fd5b80633af1e6a71161017a5780634d700e66116101495780634d700e66146103b05780634f1ef286146103dd57806352d1902d146103f05780635b5008261461040557600080fd5b80633af1e6a71461032e5780633b5881761461035b57806344add44b1461037b5780634a850dae1461039057600080fd5b8063270ab8c0116101b6578063270ab8c01461029c578063290e9e71146102be578063340a1e3e146102ee5780633659cfe61461030e57600080fd5b8063030bf203146101e85780630f6cd1201461020a5780631288a96c1461024157806318f4347014610261575b600080fd5b3480156101f457600080fd5b506102086102033660046121d3565b610637565b005b34801561021657600080fd5b5061022a61022536600461221a565b6106d4565b60405161023892919061228b565b60405180910390f35b34801561024d57600080fd5b5061020861025c3660046122c4565b610783565b34801561026d57600080fd5b5061028e61027c3660046122f4565b60cc6020526000908152604090205481565b604051908152602001610238565b3480156102a857600080fd5b506102b1610892565b6040516102389190612356565b3480156102ca57600080fd5b506102de6102d93660046122c4565b6108a6565b6040519015158152602001610238565b3480156102fa57600080fd5b506102b161030936600461221a565b61090c565b34801561031a57600080fd5b506102086103293660046122f4565b610919565b34801561033a57600080fd5b5061034e61034936600461221a565b610a02565b60405161023891906123b8565b34801561036757600080fd5b506102086103763660046122f4565b610aa7565b34801561038757600080fd5b5061028e610b6b565b34801561039c57600080fd5b5061028e6103ab3660046123cb565b610ba9565b3480156103bc57600080fd5b506103d06103cb36600461221a565b610cd2565b60405161023891906123ed565b6102086103eb366004612404565b610d78565b3480156103fc57600080fd5b5061028e610e49565b34801561041157600080fd5b506102086104203660046123cb565b610efc565b34801561043157600080fd5b50610208610fdd565b34801561044657600080fd5b5061045a61045536600461221a565b610ff1565b604051610238919061245e565b34801561047357600080fd5b506102b16104823660046123cb565b6110f4565b34801561049357600080fd5b506102086112db565b3480156104a857600080fd5b506104bc6104b7366004612471565b6113f2565b604051610238919061249d565b3480156104d557600080fd5b506102086104e43660046122f4565b61140b565b3480156104f557600080fd5b506033546040516001600160a01b039091168152602001610238565b34801561051d57600080fd5b506104bc61052c3660046124f4565b6114c7565b34801561053d57600080fd5b5061020861054c3660046122c4565b611750565b34801561055d57600080fd5b5061028e60c95481565b34801561057357600080fd5b50610208610582366004612539565b611834565b34801561059357600080fd5b506104bc6105a236600461221a565b611971565b3480156105b357600080fd5b506102de6105c23660046122f4565b60cb6020526000908152604090205460ff1681565b3480156105e357600080fd5b506102086105f2366004612565565b611982565b34801561060357600080fd5b506104bc6106123660046123cb565b611ac9565b34801561062357600080fd5b506102086106323660046122f4565b611ad8565b600082815260ca602052604090205482906001600160a01b0316331461067057604051634539372360e11b815260040160405180910390fd5b600083815260ca60209081526040909120835161069592600190920191850190612040565b507f6e07a65aae87f94e918e2b5af56931579f3bacaa90c8906472637ec24364b89383836040516106c792919061263b565b60405180910390a1505050565b60ca60205260009081526040902080546001820180546001600160a01b03909216929161070090612654565b80601f016020809104026020016040519081016040528092919081815260200182805461072c90612654565b80156107795780601f1061074e57610100808354040283529160200191610779565b820191906000526020600020905b81548152906001019060200180831161075c57829003601f168201915b5050505050905082565b600082815260ca602052604090205482906001600160a01b031633146107bc57604051634539372360e11b815260040160405180910390fd5b6001600160a01b0382166107e35760405163ddbadd5f60e01b815260040160405180910390fd5b600083815260ca602090815260408083206001600160a01b038616845260030190915290205460ff161561082a576040516359f459d560e01b815260040160405180910390fd5b600083815260ca602090815260408083206001600160a01b0386168085526003909101835292819020805460ff191660011790558051868152918201929092527f6c03d9c50687ae1728b4cfa2366eed36d504a621cac1b887f5c1f4df2015ea7b91016106c7565b60606108a16103e860006110f4565b905090565b600082815260ca60205260408120546001600160a01b03166108db57604051634f0ae43b60e11b815260040160405180910390fd5b50600082815260ca602090815260408083206001600160a01b038516845260030190915290205460ff165b92915050565b60606109068260006110f4565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561096b5760405162461bcd60e51b81526004016109629061268f565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109b4600080516020612899833981519152546001600160a01b031690565b6001600160a01b0316146109da5760405162461bcd60e51b8152600401610962906126db565b6109e381611b4e565b604080516000808252602082019092526109ff91839190611b56565b50565b600081815260ca60205260409020600101805460609190610a2290612654565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4e90612654565b8015610a9b5780601f10610a7057610100808354040283529160200191610a9b565b820191906000526020600020905b815481529060010190602001808311610a7e57829003601f168201915b50505050509050919050565b610aaf611cd5565b6001600160a01b038116610ad65760405163ddbadd5f60e01b815260040160405180910390fd5b6001600160a01b038116600090815260cb602052604090205460ff1615610b10576040516315945d8360e31b815260040160405180910390fd5b6001600160a01b038116600081815260cb6020908152604091829020805460ff1916600117905590519182527fbee92e3156054a0636fb71dc6b894ddb70a5db963fc543fca239688ce6974f5a91015b60405180910390a150565b33600090815260cc602052604081205480610b985760405162eb655d60e21b815260040160405180910390fd5b610ba3816000610ba9565b91505090565b600082815260ca6020526040812060020154610bd85760405163e6339d0560e01b815260040160405180910390fd5b81610c2557600083815260ca602052604090206002018054610bfc9060019061273d565b81548110610c0c57610c0c612754565b9060005260206000209060020201600001549050610906565b600083815260ca60205260409020600201545b8015610cb857600084815260ca60205260408120600201610c5a60018461273d565b81548110610c6a57610c6a612754565b600091825260209182902060408051808201909152600290920201805482526001015491810182905291508410610ca5575191506109069050565b5080610cb08161276a565b915050610c38565b506040516351922a1160e11b815260040160405180910390fd5b6040805180820190915260008082526020820152600082815260ca6020526040902060020154610d15575050604080518082019091526000808252602082015290565b600082815260ca602052604090206002018054610d349060019061273d565b81548110610d4457610d44612754565b9060005260206000209060020201604051806040016040529081600082015481526020016001820154815250509050919050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610dc15760405162461bcd60e51b81526004016109629061268f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e0a600080516020612899833981519152546001600160a01b031690565b6001600160a01b031614610e305760405162461bcd60e51b8152600401610962906126db565b610e3982611b4e565b610e4582826001611b56565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ee95760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610962565b5060008051602061289983398151915290565b600082815260ca602052604090205482906001600160a01b03163314801590610f425750600081815260ca6020908152604080832033845260030190915290205460ff16155b15610f6057604051638021865160e01b815260040160405180910390fd5b600083815260ca6020908152604080832081518083018352868152428185019081526002928301805460018082018355918852968690209251969093029091019485555193019290925581518581529081018490527f253ac2c290fb3c37b20cfd60899ed86c0c8313905edc8ca53ec8d2b69d9919ad91016106c7565b610fe5611cd5565b610fef6000611d2f565b565b610ff96120c4565b600082815260ca60205260409020546001600160a01b031661102e57604051634f0ae43b60e11b815260040160405180910390fd5b604051806060016040528083815260200160ca6000858152602001908152602001600020600101805461106090612654565b80601f016020809104026020016040519081016040528092919081815260200182805461108c90612654565b80156110d95780601f106110ae576101008083540402835291602001916110d9565b820191906000526020600020905b8154815290600101906020018083116110bc57829003601f168201915b505050505081526020016110ec84610cd2565b905292915050565b60606000600160c954611107919061273d565b90508083111561114b576040805160008082526020820190925290611142565b61112f6120c4565b8152602001906001900390816111275790505b50915050610906565b6000611157848361273d565b9050848111156111645750835b60008167ffffffffffffffff81111561117f5761117f612114565b6040519080825280602002602001820160405280156111b857816020015b6111a56120c4565b81526020019060019003908161119d5790505b50905060005b828110156112d15760006111d28288612781565b6111dd906001612781565b9050604051806060016040528082815260200160ca6000848152602001908152602001600020600101805461121190612654565b80601f016020809104026020016040519081016040528092919081815260200182805461123d90612654565b801561128a5780601f1061125f5761010080835404028352916020019161128a565b820191906000526020600020905b81548152906001019060200180831161126d57829003601f168201915b5050505050815260200161129d83610cd2565b8152508383815181106112b2576112b2612754565b60200260200101819052505080806112c990612799565b9150506111be565b5095945050505050565b600054610100900460ff16158080156112fb5750600054600160ff909116105b806113155750303b158015611315575060005460ff166001145b6113785760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610962565b6000805460ff19166001179055801561139b576000805461ff0019166101001790555b6113a3611d81565b6113ab611db0565b600160c95580156109ff576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610b60565b606061140184848460006114c7565b90505b9392505050565b611413611cd5565b6001600160a01b03811661143a5760405163ddbadd5f60e01b815260040160405180910390fd5b6001600160a01b038116600090815260cb602052604090205460ff166114765760405160016220ed5760e21b0319815260040160405180910390fd5b6001600160a01b038116600081815260cb6020908152604091829020805460ff1916905590519182527ff580004af0ac6037b74990f19cc58a21e293bdfa31495f8dccfdfaa8216b17a69101610b60565b600084815260ca60205260409020546060906001600160a01b03166114ff57604051634f0ae43b60e11b815260040160405180910390fd5b600085815260ca602052604090206002015480158061151d57508084115b1561156857604080516000808252602082019092529061155f565b60408051808201909152600080825260208201528152602001906001900390816115385790505b50915050611748565b6000611574858361273d565b9050858111156115815750845b60008167ffffffffffffffff81111561159c5761159c612114565b6040519080825280602002602001820160405280156115e157816020015b60408051808201909152600080825260208201528152602001906001900390816115ba5790505b50905060008560018111156115f8576115f86127b4565b14156116ae5760005b828110156116a857600089815260ca60205260409020600201818861162760018861273d565b611631919061273d565b61163b919061273d565b8154811061164b5761164b612754565b90600052602060002090600202016040518060400160405290816000820154815260200160018201548152505082828151811061168a5761168a612754565b602002602001018190525080806116a090612799565b915050611601565b50611743565b60005b8281101561174157600089815260ca602052604090206002016116d48289612781565b815481106116e4576116e4612754565b90600052602060002090600202016040518060400160405290816000820154815260200160018201548152505082828151811061172357611723612754565b6020026020010181905250808061173990612799565b9150506116b1565b505b925050505b949350505050565b600082815260ca602052604090205482906001600160a01b0316331461178957604051634539372360e11b815260040160405180910390fd5b600083815260ca602090815260408083206001600160a01b038616845260030190915290205460ff166117cf576040516305b05a3560e01b815260040160405180910390fd5b600083815260ca602090815260408083206001600160a01b0386168085526003909101835292819020805460ff191690558051868152918201929092527f0c94fe904e751475eab2483d5df4a8a2beb2f3ba2b9c18e7fb4fa15479aabb1291016106c7565b6001600160a01b03821661185b5760405163ddbadd5f60e01b815260040160405180910390fd5b6000826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561189657600080fd5b505afa1580156118aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ce91906127ca565b90506001600160a01b0381166118f75760405163566225c360e01b815260040160405180910390fd5b6001600160a01b03811633146119205760405163f0d59a1360e01b815260040160405180910390fd5b6001600160a01b038316600081815260cc6020908152604091829020859055815192835282018490527fb1e9a30ad0a4cd2e52c1342b823fc38f299ff92bfac90b7c0f012bff5e46932791016106c7565b6060610906826103e86000806114c7565b6033546001600160a01b031633148015906119ad575033600090815260cb602052604090205460ff16155b156119cb5760405163c63e278560e01b815260040160405180910390fd5b60c98054600091826119dc83612799565b90915550600081815260ca6020908152604090912080546001600160a01b031916331781558551929350611a1892600190910191860190612040565b5060005b8251811015611a9557600160ca60008481526020019081526020016000206003016000858481518110611a5157611a51612754565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580611a8d81612799565b915050611a1c565b507f8be5a66713f5e31c5b4ffb36af85338cc1b4440f380e6ea359f9b4966c7c9a458184336040516106c7939291906127e7565b606061140483836000806114c7565b611ae0611cd5565b6001600160a01b038116611b455760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610962565b6109ff81611d2f565b6109ff611cd5565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611b8e57611b8983611dd7565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bc757600080fd5b505afa925050508015611bf7575060408051601f3d908101601f19168201909252611bf491810190612818565b60015b611c5a5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610962565b6000805160206128998339815191528114611cc95760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610962565b50611b89838383611e73565b6033546001600160a01b03163314610fef5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610962565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16611da85760405162461bcd60e51b815260040161096290612831565b610fef611e9e565b600054610100900460ff16610fef5760405162461bcd60e51b815260040161096290612831565b6001600160a01b0381163b611e445760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610962565b60008051602061289983398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611e7c83611ece565b600082511180611e895750805b15611b8957611e988383611f0e565b50505050565b600054610100900460ff16611ec55760405162461bcd60e51b815260040161096290612831565b610fef33611d2f565b611ed781611dd7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b611f765760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610962565b600080846001600160a01b031684604051611f91919061287c565b600060405180830381855af49150503d8060008114611fcc576040519150601f19603f3d011682016040523d82523d6000602084013e611fd1565b606091505b5091509150611ff982826040518060600160405280602781526020016128b960279139612002565b95945050505050565b60608315612011575081611404565b61140483838151156120265781518083602001fd5b8060405162461bcd60e51b815260040161096291906123b8565b82805461204c90612654565b90600052602060002090601f01602090048101928261206e57600085556120b4565b82601f1061208757805160ff19168380011785556120b4565b828001600101855582156120b4579182015b828111156120b4578251825591602001919060010190612099565b506120c09291506120ff565b5090565b604051806060016040528060008152602001606081526020016120fa604051806040016040528060008152602001600081525090565b905290565b5b808211156120c05760008155600101612100565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561215357612153612114565b604052919050565b600067ffffffffffffffff83111561217557612175612114565b612188601f8401601f191660200161212a565b905082815283838301111561219c57600080fd5b828260208301376000602084830101529392505050565b600082601f8301126121c457600080fd5b6114048383356020850161215b565b600080604083850312156121e657600080fd5b82359150602083013567ffffffffffffffff81111561220457600080fd5b612210858286016121b3565b9150509250929050565b60006020828403121561222c57600080fd5b5035919050565b60005b8381101561224e578181015183820152602001612236565b83811115611e985750506000910152565b60008151808452612277816020860160208601612233565b601f01601f19169290920160200192915050565b6001600160a01b03831681526040602082018190526000906114019083018461225f565b6001600160a01b03811681146109ff57600080fd5b600080604083850312156122d757600080fd5b8235915060208301356122e9816122af565b809150509250929050565b60006020828403121561230657600080fd5b8135611404816122af565b805182526000602082015160806020850152612330608085018261225f565b9050604083015161234e604086018280518252602090810151910152565b509392505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156123ab57603f19888603018452612399858351612311565b9450928501929085019060010161237d565b5092979650505050505050565b602081526000611404602083018461225f565b600080604083850312156123de57600080fd5b50508035926020909101359150565b815181526020808301519082015260408101610906565b6000806040838503121561241757600080fd5b8235612422816122af565b9150602083013567ffffffffffffffff81111561243e57600080fd5b8301601f8101851361244f57600080fd5b6122108582356020840161215b565b6020815260006114046020830184612311565b60008060006060848603121561248657600080fd5b505081359360208301359350604090920135919050565b602080825282518282018190526000919060409081850190868401855b828110156124e7576124d784835180518252602090810151910152565b92840192908501906001016124ba565b5091979650505050505050565b6000806000806080858703121561250a57600080fd5b84359350602085013592506040850135915060608501356002811061252e57600080fd5b939692955090935050565b6000806040838503121561254c57600080fd5b8235612557816122af565b946020939093013593505050565b6000806040838503121561257857600080fd5b823567ffffffffffffffff8082111561259057600080fd5b61259c868387016121b3565b93506020915081850135818111156125b357600080fd5b8501601f810187136125c457600080fd5b8035828111156125d6576125d6612114565b8060051b92506125e784840161212a565b818152928201840192848101908985111561260157600080fd5b928501925b8484101561262b578335925061261b836122af565b8282529285019290850190612606565b8096505050505050509250929050565b828152604060208201526000611401604083018461225f565b600181811c9082168061266857607f821691505b6020821081141561268957634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008282101561274f5761274f612727565b500390565b634e487b7160e01b600052603260045260246000fd5b60008161277957612779612727565b506000190190565b6000821982111561279457612794612727565b500190565b60006000198214156127ad576127ad612727565b5060010190565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156127dc57600080fd5b8151611404816122af565b838152606060208201526000612800606083018561225f565b905060018060a01b0383166040830152949350505050565b60006020828403121561282a57600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000825161288e818460208701612233565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212204147c82826f35ce27df4988ac2559f902d7cc3f9fb4c06c27db26338bcd1fdcd64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101e35760003560e01c8063715018a6116101025780639e12a6da11610095578063cbc6fb8711610064578063cbc6fb87146105a7578063e2bacbf1146105d7578063e9865c73146105f7578063f2fde38b1461061757600080fd5b80639e12a6da14610531578063a0ab362314610551578063a1a83c9f14610567578063b29e522c1461058757600080fd5b80638944df32116100d15780638944df321461049c578063897d349f146104c95780638da5cb5b146104e9578063932645751461051157600080fd5b8063715018a6146104255780637b06ec681461043a5780637eeef551146104675780638129fc1c1461048757600080fd5b80633af1e6a71161017a5780634d700e66116101495780634d700e66146103b05780634f1ef286146103dd57806352d1902d146103f05780635b5008261461040557600080fd5b80633af1e6a71461032e5780633b5881761461035b57806344add44b1461037b5780634a850dae1461039057600080fd5b8063270ab8c0116101b6578063270ab8c01461029c578063290e9e71146102be578063340a1e3e146102ee5780633659cfe61461030e57600080fd5b8063030bf203146101e85780630f6cd1201461020a5780631288a96c1461024157806318f4347014610261575b600080fd5b3480156101f457600080fd5b506102086102033660046121d3565b610637565b005b34801561021657600080fd5b5061022a61022536600461221a565b6106d4565b60405161023892919061228b565b60405180910390f35b34801561024d57600080fd5b5061020861025c3660046122c4565b610783565b34801561026d57600080fd5b5061028e61027c3660046122f4565b60cc6020526000908152604090205481565b604051908152602001610238565b3480156102a857600080fd5b506102b1610892565b6040516102389190612356565b3480156102ca57600080fd5b506102de6102d93660046122c4565b6108a6565b6040519015158152602001610238565b3480156102fa57600080fd5b506102b161030936600461221a565b61090c565b34801561031a57600080fd5b506102086103293660046122f4565b610919565b34801561033a57600080fd5b5061034e61034936600461221a565b610a02565b60405161023891906123b8565b34801561036757600080fd5b506102086103763660046122f4565b610aa7565b34801561038757600080fd5b5061028e610b6b565b34801561039c57600080fd5b5061028e6103ab3660046123cb565b610ba9565b3480156103bc57600080fd5b506103d06103cb36600461221a565b610cd2565b60405161023891906123ed565b6102086103eb366004612404565b610d78565b3480156103fc57600080fd5b5061028e610e49565b34801561041157600080fd5b506102086104203660046123cb565b610efc565b34801561043157600080fd5b50610208610fdd565b34801561044657600080fd5b5061045a61045536600461221a565b610ff1565b604051610238919061245e565b34801561047357600080fd5b506102b16104823660046123cb565b6110f4565b34801561049357600080fd5b506102086112db565b3480156104a857600080fd5b506104bc6104b7366004612471565b6113f2565b604051610238919061249d565b3480156104d557600080fd5b506102086104e43660046122f4565b61140b565b3480156104f557600080fd5b506033546040516001600160a01b039091168152602001610238565b34801561051d57600080fd5b506104bc61052c3660046124f4565b6114c7565b34801561053d57600080fd5b5061020861054c3660046122c4565b611750565b34801561055d57600080fd5b5061028e60c95481565b34801561057357600080fd5b50610208610582366004612539565b611834565b34801561059357600080fd5b506104bc6105a236600461221a565b611971565b3480156105b357600080fd5b506102de6105c23660046122f4565b60cb6020526000908152604090205460ff1681565b3480156105e357600080fd5b506102086105f2366004612565565b611982565b34801561060357600080fd5b506104bc6106123660046123cb565b611ac9565b34801561062357600080fd5b506102086106323660046122f4565b611ad8565b600082815260ca602052604090205482906001600160a01b0316331461067057604051634539372360e11b815260040160405180910390fd5b600083815260ca60209081526040909120835161069592600190920191850190612040565b507f6e07a65aae87f94e918e2b5af56931579f3bacaa90c8906472637ec24364b89383836040516106c792919061263b565b60405180910390a1505050565b60ca60205260009081526040902080546001820180546001600160a01b03909216929161070090612654565b80601f016020809104026020016040519081016040528092919081815260200182805461072c90612654565b80156107795780601f1061074e57610100808354040283529160200191610779565b820191906000526020600020905b81548152906001019060200180831161075c57829003601f168201915b5050505050905082565b600082815260ca602052604090205482906001600160a01b031633146107bc57604051634539372360e11b815260040160405180910390fd5b6001600160a01b0382166107e35760405163ddbadd5f60e01b815260040160405180910390fd5b600083815260ca602090815260408083206001600160a01b038616845260030190915290205460ff161561082a576040516359f459d560e01b815260040160405180910390fd5b600083815260ca602090815260408083206001600160a01b0386168085526003909101835292819020805460ff191660011790558051868152918201929092527f6c03d9c50687ae1728b4cfa2366eed36d504a621cac1b887f5c1f4df2015ea7b91016106c7565b60606108a16103e860006110f4565b905090565b600082815260ca60205260408120546001600160a01b03166108db57604051634f0ae43b60e11b815260040160405180910390fd5b50600082815260ca602090815260408083206001600160a01b038516845260030190915290205460ff165b92915050565b60606109068260006110f4565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561096b5760405162461bcd60e51b81526004016109629061268f565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109b4600080516020612899833981519152546001600160a01b031690565b6001600160a01b0316146109da5760405162461bcd60e51b8152600401610962906126db565b6109e381611b4e565b604080516000808252602082019092526109ff91839190611b56565b50565b600081815260ca60205260409020600101805460609190610a2290612654565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4e90612654565b8015610a9b5780601f10610a7057610100808354040283529160200191610a9b565b820191906000526020600020905b815481529060010190602001808311610a7e57829003601f168201915b50505050509050919050565b610aaf611cd5565b6001600160a01b038116610ad65760405163ddbadd5f60e01b815260040160405180910390fd5b6001600160a01b038116600090815260cb602052604090205460ff1615610b10576040516315945d8360e31b815260040160405180910390fd5b6001600160a01b038116600081815260cb6020908152604091829020805460ff1916600117905590519182527fbee92e3156054a0636fb71dc6b894ddb70a5db963fc543fca239688ce6974f5a91015b60405180910390a150565b33600090815260cc602052604081205480610b985760405162eb655d60e21b815260040160405180910390fd5b610ba3816000610ba9565b91505090565b600082815260ca6020526040812060020154610bd85760405163e6339d0560e01b815260040160405180910390fd5b81610c2557600083815260ca602052604090206002018054610bfc9060019061273d565b81548110610c0c57610c0c612754565b9060005260206000209060020201600001549050610906565b600083815260ca60205260409020600201545b8015610cb857600084815260ca60205260408120600201610c5a60018461273d565b81548110610c6a57610c6a612754565b600091825260209182902060408051808201909152600290920201805482526001015491810182905291508410610ca5575191506109069050565b5080610cb08161276a565b915050610c38565b506040516351922a1160e11b815260040160405180910390fd5b6040805180820190915260008082526020820152600082815260ca6020526040902060020154610d15575050604080518082019091526000808252602082015290565b600082815260ca602052604090206002018054610d349060019061273d565b81548110610d4457610d44612754565b9060005260206000209060020201604051806040016040529081600082015481526020016001820154815250509050919050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610dc15760405162461bcd60e51b81526004016109629061268f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e0a600080516020612899833981519152546001600160a01b031690565b6001600160a01b031614610e305760405162461bcd60e51b8152600401610962906126db565b610e3982611b4e565b610e4582826001611b56565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ee95760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610962565b5060008051602061289983398151915290565b600082815260ca602052604090205482906001600160a01b03163314801590610f425750600081815260ca6020908152604080832033845260030190915290205460ff16155b15610f6057604051638021865160e01b815260040160405180910390fd5b600083815260ca6020908152604080832081518083018352868152428185019081526002928301805460018082018355918852968690209251969093029091019485555193019290925581518581529081018490527f253ac2c290fb3c37b20cfd60899ed86c0c8313905edc8ca53ec8d2b69d9919ad91016106c7565b610fe5611cd5565b610fef6000611d2f565b565b610ff96120c4565b600082815260ca60205260409020546001600160a01b031661102e57604051634f0ae43b60e11b815260040160405180910390fd5b604051806060016040528083815260200160ca6000858152602001908152602001600020600101805461106090612654565b80601f016020809104026020016040519081016040528092919081815260200182805461108c90612654565b80156110d95780601f106110ae576101008083540402835291602001916110d9565b820191906000526020600020905b8154815290600101906020018083116110bc57829003601f168201915b505050505081526020016110ec84610cd2565b905292915050565b60606000600160c954611107919061273d565b90508083111561114b576040805160008082526020820190925290611142565b61112f6120c4565b8152602001906001900390816111275790505b50915050610906565b6000611157848361273d565b9050848111156111645750835b60008167ffffffffffffffff81111561117f5761117f612114565b6040519080825280602002602001820160405280156111b857816020015b6111a56120c4565b81526020019060019003908161119d5790505b50905060005b828110156112d15760006111d28288612781565b6111dd906001612781565b9050604051806060016040528082815260200160ca6000848152602001908152602001600020600101805461121190612654565b80601f016020809104026020016040519081016040528092919081815260200182805461123d90612654565b801561128a5780601f1061125f5761010080835404028352916020019161128a565b820191906000526020600020905b81548152906001019060200180831161126d57829003601f168201915b5050505050815260200161129d83610cd2565b8152508383815181106112b2576112b2612754565b60200260200101819052505080806112c990612799565b9150506111be565b5095945050505050565b600054610100900460ff16158080156112fb5750600054600160ff909116105b806113155750303b158015611315575060005460ff166001145b6113785760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610962565b6000805460ff19166001179055801561139b576000805461ff0019166101001790555b6113a3611d81565b6113ab611db0565b600160c95580156109ff576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610b60565b606061140184848460006114c7565b90505b9392505050565b611413611cd5565b6001600160a01b03811661143a5760405163ddbadd5f60e01b815260040160405180910390fd5b6001600160a01b038116600090815260cb602052604090205460ff166114765760405160016220ed5760e21b0319815260040160405180910390fd5b6001600160a01b038116600081815260cb6020908152604091829020805460ff1916905590519182527ff580004af0ac6037b74990f19cc58a21e293bdfa31495f8dccfdfaa8216b17a69101610b60565b600084815260ca60205260409020546060906001600160a01b03166114ff57604051634f0ae43b60e11b815260040160405180910390fd5b600085815260ca602052604090206002015480158061151d57508084115b1561156857604080516000808252602082019092529061155f565b60408051808201909152600080825260208201528152602001906001900390816115385790505b50915050611748565b6000611574858361273d565b9050858111156115815750845b60008167ffffffffffffffff81111561159c5761159c612114565b6040519080825280602002602001820160405280156115e157816020015b60408051808201909152600080825260208201528152602001906001900390816115ba5790505b50905060008560018111156115f8576115f86127b4565b14156116ae5760005b828110156116a857600089815260ca60205260409020600201818861162760018861273d565b611631919061273d565b61163b919061273d565b8154811061164b5761164b612754565b90600052602060002090600202016040518060400160405290816000820154815260200160018201548152505082828151811061168a5761168a612754565b602002602001018190525080806116a090612799565b915050611601565b50611743565b60005b8281101561174157600089815260ca602052604090206002016116d48289612781565b815481106116e4576116e4612754565b90600052602060002090600202016040518060400160405290816000820154815260200160018201548152505082828151811061172357611723612754565b6020026020010181905250808061173990612799565b9150506116b1565b505b925050505b949350505050565b600082815260ca602052604090205482906001600160a01b0316331461178957604051634539372360e11b815260040160405180910390fd5b600083815260ca602090815260408083206001600160a01b038616845260030190915290205460ff166117cf576040516305b05a3560e01b815260040160405180910390fd5b600083815260ca602090815260408083206001600160a01b0386168085526003909101835292819020805460ff191690558051868152918201929092527f0c94fe904e751475eab2483d5df4a8a2beb2f3ba2b9c18e7fb4fa15479aabb1291016106c7565b6001600160a01b03821661185b5760405163ddbadd5f60e01b815260040160405180910390fd5b6000826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561189657600080fd5b505afa1580156118aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ce91906127ca565b90506001600160a01b0381166118f75760405163566225c360e01b815260040160405180910390fd5b6001600160a01b03811633146119205760405163f0d59a1360e01b815260040160405180910390fd5b6001600160a01b038316600081815260cc6020908152604091829020859055815192835282018490527fb1e9a30ad0a4cd2e52c1342b823fc38f299ff92bfac90b7c0f012bff5e46932791016106c7565b6060610906826103e86000806114c7565b6033546001600160a01b031633148015906119ad575033600090815260cb602052604090205460ff16155b156119cb5760405163c63e278560e01b815260040160405180910390fd5b60c98054600091826119dc83612799565b90915550600081815260ca6020908152604090912080546001600160a01b031916331781558551929350611a1892600190910191860190612040565b5060005b8251811015611a9557600160ca60008481526020019081526020016000206003016000858481518110611a5157611a51612754565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580611a8d81612799565b915050611a1c565b507f8be5a66713f5e31c5b4ffb36af85338cc1b4440f380e6ea359f9b4966c7c9a458184336040516106c7939291906127e7565b606061140483836000806114c7565b611ae0611cd5565b6001600160a01b038116611b455760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610962565b6109ff81611d2f565b6109ff611cd5565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611b8e57611b8983611dd7565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bc757600080fd5b505afa925050508015611bf7575060408051601f3d908101601f19168201909252611bf491810190612818565b60015b611c5a5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610962565b6000805160206128998339815191528114611cc95760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610962565b50611b89838383611e73565b6033546001600160a01b03163314610fef5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610962565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16611da85760405162461bcd60e51b815260040161096290612831565b610fef611e9e565b600054610100900460ff16610fef5760405162461bcd60e51b815260040161096290612831565b6001600160a01b0381163b611e445760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610962565b60008051602061289983398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611e7c83611ece565b600082511180611e895750805b15611b8957611e988383611f0e565b50505050565b600054610100900460ff16611ec55760405162461bcd60e51b815260040161096290612831565b610fef33611d2f565b611ed781611dd7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b611f765760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610962565b600080846001600160a01b031684604051611f91919061287c565b600060405180830381855af49150503d8060008114611fcc576040519150601f19603f3d011682016040523d82523d6000602084013e611fd1565b606091505b5091509150611ff982826040518060600160405280602781526020016128b960279139612002565b95945050505050565b60608315612011575081611404565b61140483838151156120265781518083602001fd5b8060405162461bcd60e51b815260040161096291906123b8565b82805461204c90612654565b90600052602060002090601f01602090048101928261206e57600085556120b4565b82601f1061208757805160ff19168380011785556120b4565b828001600101855582156120b4579182015b828111156120b4578251825591602001919060010190612099565b506120c09291506120ff565b5090565b604051806060016040528060008152602001606081526020016120fa604051806040016040528060008152602001600081525090565b905290565b5b808211156120c05760008155600101612100565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561215357612153612114565b604052919050565b600067ffffffffffffffff83111561217557612175612114565b612188601f8401601f191660200161212a565b905082815283838301111561219c57600080fd5b828260208301376000602084830101529392505050565b600082601f8301126121c457600080fd5b6114048383356020850161215b565b600080604083850312156121e657600080fd5b82359150602083013567ffffffffffffffff81111561220457600080fd5b612210858286016121b3565b9150509250929050565b60006020828403121561222c57600080fd5b5035919050565b60005b8381101561224e578181015183820152602001612236565b83811115611e985750506000910152565b60008151808452612277816020860160208601612233565b601f01601f19169290920160200192915050565b6001600160a01b03831681526040602082018190526000906114019083018461225f565b6001600160a01b03811681146109ff57600080fd5b600080604083850312156122d757600080fd5b8235915060208301356122e9816122af565b809150509250929050565b60006020828403121561230657600080fd5b8135611404816122af565b805182526000602082015160806020850152612330608085018261225f565b9050604083015161234e604086018280518252602090810151910152565b509392505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156123ab57603f19888603018452612399858351612311565b9450928501929085019060010161237d565b5092979650505050505050565b602081526000611404602083018461225f565b600080604083850312156123de57600080fd5b50508035926020909101359150565b815181526020808301519082015260408101610906565b6000806040838503121561241757600080fd5b8235612422816122af565b9150602083013567ffffffffffffffff81111561243e57600080fd5b8301601f8101851361244f57600080fd5b6122108582356020840161215b565b6020815260006114046020830184612311565b60008060006060848603121561248657600080fd5b505081359360208301359350604090920135919050565b602080825282518282018190526000919060409081850190868401855b828110156124e7576124d784835180518252602090810151910152565b92840192908501906001016124ba565b5091979650505050505050565b6000806000806080858703121561250a57600080fd5b84359350602085013592506040850135915060608501356002811061252e57600080fd5b939692955090935050565b6000806040838503121561254c57600080fd5b8235612557816122af565b946020939093013593505050565b6000806040838503121561257857600080fd5b823567ffffffffffffffff8082111561259057600080fd5b61259c868387016121b3565b93506020915081850135818111156125b357600080fd5b8501601f810187136125c457600080fd5b8035828111156125d6576125d6612114565b8060051b92506125e784840161212a565b818152928201840192848101908985111561260157600080fd5b928501925b8484101561262b578335925061261b836122af565b8282529285019290850190612606565b8096505050505050509250929050565b828152604060208201526000611401604083018461225f565b600181811c9082168061266857607f821691505b6020821081141561268957634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008282101561274f5761274f612727565b500390565b634e487b7160e01b600052603260045260246000fd5b60008161277957612779612727565b506000190190565b6000821982111561279457612794612727565b500190565b60006000198214156127ad576127ad612727565b5060010190565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156127dc57600080fd5b8151611404816122af565b838152606060208201526000612800606083018561225f565b905060018060a01b0383166040830152949350505050565b60006020828403121561282a57600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000825161288e818460208701612233565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212204147c82826f35ce27df4988ac2559f902d7cc3f9fb4c06c27db26338bcd1fdcd64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 527,
        "contract": "contracts/OpenMarketsOracle.sol:OpenMarketsOracle",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 530,
        "contract": "contracts/OpenMarketsOracle.sol:OpenMarketsOracle",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1150,
        "contract": "contracts/OpenMarketsOracle.sol:OpenMarketsOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/OpenMarketsOracle.sol:OpenMarketsOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/OpenMarketsOracle.sol:OpenMarketsOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 509,
        "contract": "contracts/OpenMarketsOracle.sol:OpenMarketsOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 824,
        "contract": "contracts/OpenMarketsOracle.sol:OpenMarketsOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1258,
        "contract": "contracts/OpenMarketsOracle.sol:OpenMarketsOracle",
        "label": "nextDataFeedId",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 1263,
        "contract": "contracts/OpenMarketsOracle.sol:OpenMarketsOracle",
        "label": "dataFeeds",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_struct(DataFeed)1248_storage)"
      },
      {
        "astId": 1267,
        "contract": "contracts/OpenMarketsOracle.sol:OpenMarketsOracle",
        "label": "dataFeedCreators",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1271,
        "contract": "contracts/OpenMarketsOracle.sol:OpenMarketsOracle",
        "label": "subscriberRegistry",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Value)1235_storage)dyn_storage": {
        "base": "t_struct(Value)1235_storage",
        "encoding": "dynamic_array",
        "label": "struct OpenMarketsOracle.Value[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(DataFeed)1248_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OpenMarketsOracle.DataFeed)",
        "numberOfBytes": "32",
        "value": "t_struct(DataFeed)1248_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DataFeed)1248_storage": {
        "encoding": "inplace",
        "label": "struct OpenMarketsOracle.DataFeed",
        "members": [
          {
            "astId": 1237,
            "contract": "contracts/OpenMarketsOracle.sol:OpenMarketsOracle",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1239,
            "contract": "contracts/OpenMarketsOracle.sol:OpenMarketsOracle",
            "label": "nickname",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1243,
            "contract": "contracts/OpenMarketsOracle.sol:OpenMarketsOracle",
            "label": "values",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_struct(Value)1235_storage)dyn_storage"
          },
          {
            "astId": 1247,
            "contract": "contracts/OpenMarketsOracle.sol:OpenMarketsOracle",
            "label": "scribes",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Value)1235_storage": {
        "encoding": "inplace",
        "label": "struct OpenMarketsOracle.Value",
        "members": [
          {
            "astId": 1232,
            "contract": "contracts/OpenMarketsOracle.sol:OpenMarketsOracle",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1234,
            "contract": "contracts/OpenMarketsOracle.sol:OpenMarketsOracle",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
