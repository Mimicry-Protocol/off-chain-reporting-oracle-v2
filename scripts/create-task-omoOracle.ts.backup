import hre from "hardhat";
import { AutomateSDK, Web3Function } from "@gelatonetwork/automate-sdk";
import { OpenMarketsOracle } from "../typechain";
import { version } from "../web3-functions/open-markets-oracle/index";
const { ethers, w3f } = hre;
import minimist from "minimist";

const argv = minimist(process.argv.slice(2), {
  string: [
    "nickname",
    "deviation",
    "heartbeat", 
    "providers",
    "nft-collections",
    "tokens", 
    "currency",
    "metric",
    "consensus-mechanism",
  ],
});
console.dir(argv);

try {
  if (!argv.nickname) throw new Error("Missing argv nickname");
  const nickname = argv.nickname;

  if (!argv.deviation) throw new Error("Missing argv deviation");
  const deviation = argv.deviation;

  if (!argv.heartbeat) throw new Error("Missing argv heartbeat");
  const heartbeat = argv.heartbeat;

  if (!argv.providers) throw new Error("Missing argv providers");
  const providers = argv.providers;
  
  if (!argv.nftCollections) throw new Error("Missing argv nftCollections");
  const nftCollections = argv.nftCollections;
  
  if (!argv.tokens) throw new Error("Missing argv tokens");
  const tokens = argv.tokens;
  
  if (!argv.currency) throw new Error("Missing argv currency");
  const currency = argv.currency;
  
  if (!argv.metric) throw new Error("Missing argv metric");
  const metric = argv.metric;
  
  if (!argv.consensusMechanism) throw new Error("Missing argv consensusMechanism");
  const consensusMechanism = argv.consensusMechanism;
  
  const main = async () => {
    const oracle = <OpenMarketsOracle>await ethers.getContract("OpenMarketsOracle");
    const oracleW3f = w3f.get("open-markets-oracle");

    const [deployer] = await ethers.getSigners();
    const chainId = (await ethers.provider.getNetwork()).chainId;

    console.log(`chainId: ${chainId}`);

    const automate = new AutomateSDK(chainId, deployer);
    const web3Function = new Web3Function(chainId, deployer);

    // Deploy Web3Function on IPFS
    console.log("Deploying Web3Function on IPFS...");
    const cid = await oracleW3f.deploy();
    console.log(`Web3Function IPFS CID: ${cid}`);

    // Create task using automate sdk
    console.log("Creating automate task...");
    const { taskId, tx } = await automate.createBatchExecTask({
      name: "OMO v" + version + ": " + nickname,
      web3FunctionHash: cid,
      web3FunctionArgs: {
        nickname: nickname,
        deviation: deviation,
        heartbeat: heartbeat, 
        providers: providers,
        nftCollections: nftCollections,
        tokens: tokens, 
        currency: currency,
        metric: metric,
        consensusMechanism: consensusMechanism,
      },
    });
    await tx.wait();
    console.log(`Task created, taskId: ${taskId} (tx hash: ${tx.hash})`);
    console.log(
      `> https://beta.app.gelato.network/task/${taskId}?chainId=${chainId}`
    );

    // Set task specific secrets
    const secrets = oracleW3f.getSecrets();
    if (Object.keys(secrets).length > 0) {
      await web3Function.secrets.set(secrets, taskId);
      console.log(`Secrets set`);
    }
  };

  main()
    .then(() => {
      process.exit();
    })
    .catch((err) => {
      console.error("Error:", err.message);
      process.exit(1);
    });

} catch (error: any) {
  console.error(error.message);
}